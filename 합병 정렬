#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void Swap(int* a, int *b)
{
	int temp = *a;
	*a = *b;
	*b = temp;
}
void merge(int* arr, int left, int mid, int right, int* sorted) {//ex) 3 4 6 8
	int i, j, k;  //mid=2
	i = left;     //i=1 / i=2 / i=3
	j = mid + 1;  //j=3 / j=3 / j=3
	k = left;     //k=1 / k=2 / k=3
	while (i <= mid && j <= right) {
		if (arr[i] <= arr[j])
			sorted[k++] = arr[i++];
		else
			sorted[k++] = arr[j++];
	}

	if (i > mid) {//left가  mid 보다 클 경우(오른쪽 배열을 그대로 가지고 내려오는 case)
		for (int l = j; l <= right; l++)
			sorted[k++] = arr[l];
	}
	else {//왼쪽 배열에 아직 수가 남아있는 case
		for (int l = i; l <= mid; l++)
			sorted[k++] = arr[l];
	}

	for (int l = left; l <= right; l++) //정렬한 sorted 배열을 arr 배열에 다시 덮어씌운다
		arr[l] = sorted[l];
}
void MergeSort(int* arr, int left, int right, int* sorted)
{
	int mid;
	if (left < right) {
		mid = (left + right) / 2;
		MergeSort(arr, left, mid, sorted);
		MergeSort(arr, mid + 1, right, sorted);
		merge(arr, left, mid, right, sorted);
	}
}

void PrintArr(int* arr, int size)
{
	for (int i = 0; i < size; i++)
		printf("%d ", arr[i]);
	printf("\n");
}
int* CreateArr(int size, int range)
{
	int* arr = (int*)malloc(sizeof(int)*size);
	for (int i = 0; i < size; i++)
		arr[i] = rand() % range + 1;
	return arr;
}
int main()
{
	int size = 10;
	int range = 100;
	srand(time(NULL));
	int* arr = CreateArr(size, range);
	int* sorted = (int*)malloc(sizeof(int)*size);
	PrintArr(arr, size);

	MergeSort(arr, 0, size - 1, sorted);

	PrintArr(arr, size);
	return 0;
}
